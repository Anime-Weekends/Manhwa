from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from pyrogram.errors import FloodWait

from .storage import web_data, split_list, plugins_list, users_txt, retry_on_flood, queue, asyncio

from pyrogram.errors import FloodWait
import pyrogram.errors

from bot import Bot, Vars, logger

import random
from Tools.db import *
from Tools.my_token import *

from pyrogram.handlers import MessageHandler
import time

from asyncio import create_subprocess_exec
from os import execl
from sys import executable

import shutil, psutil, time, os, platform
import asyncio

HELP_MSG = """<blockquote><b>‚Ä∫‚Ä∫ T·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥Ä ·¥ç·¥Ä…¥…¢·¥Ä ·¥ä·¥ús·¥õ ·¥õ è·¥ò·¥á ·¥õ ú·¥á …¥·¥Ä·¥ç·¥á ·¥è“ì ·¥õ ú·¥á ·¥ç·¥Ä…¥…¢·¥Ä  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ã·¥á·¥á·¥ò ·¥ú·¥ò ·¥õ·¥è ·¥Ö·¥Ä·¥õ·¥á.</blockquote>
<pre>ùóôùó¢ùó• ùóòùó´ùóîùó†ùó£ùóüùóò</pre>
<blockquote>Hell's Paradise</blockquote>
<blockquote expandable><i>·¥Ñ ú·¥è·¥ès·¥á ·¥õ ú·¥á ·¥°·¥á ôs…™·¥õ·¥á ·¥° ú·¥á Ä·¥á  è·¥è·¥ú ·¥Ñ·¥è·¥ú ü·¥Ö ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥õ ú·¥á ·¥ç·¥Ä…¥…¢·¥Ä.  ú·¥á Ä·¥á  è·¥è·¥ú ·¥°…™ ü ü  ú·¥Ä·¥†·¥á ·¥õ ú·¥á ·¥è·¥ò·¥õ…™·¥è…¥ ·¥õ·¥è s·¥ú ôs·¥Ñ Ä…™ ô·¥á, ·¥è Ä ·¥õ·¥è ·¥Ñ ú·¥è·¥ès·¥á ·¥Ä ·¥Ñ ú·¥Ä·¥ò·¥õ·¥á Ä ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö. ·¥õ ú·¥á ·¥Ñ ú·¥Ä·¥ò·¥õ·¥á Äs ·¥Ä Ä·¥á s·¥è Ä·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥õ·¥è ·¥õ ú·¥á ·¥°·¥á ôs…™·¥õ·¥á.</i></blockquote>
<blockquote><b><a href='https://t.me/EmitingStars_Botz'>‚Ä£ U·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ñ ú·¥Ä…¥…¥·¥á ü : E·¥ç…™·¥õ…™…¥…¢ S·¥õ·¥Ä Äs</a></b></blockquote>"""

from pyrogram import Client
from pyrogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
import asyncio
import time

from pyrogram.enums import ChatAction
import random

stickers = [
    "CAACAgUAAxkBAAEOXBhoCoKZ76jevKX-Vc5v5SZhCeQAAXMAAh4KAALJrhlVZygbxFWWTLw2BA"
]

welcome_text = (
    "<i><blockquote>W·¥á ü·¥Ñ·¥è·¥ç·¥á,  ô·¥Ä ô è‚Ä¶ …™‚Äô·¥†·¥á  ô·¥á·¥á…¥ ·¥Ñ Ä·¥Ä·¥†…™…¥…¢  è·¥è·¥ú Ä ·¥ò Ä·¥ás·¥á…¥·¥Ñ·¥á ‚Äî "
    "“ì·¥á·¥á üs ·¥ò·¥á Ä“ì·¥á·¥Ñ·¥õ …¥·¥è·¥° ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú‚Äô Ä·¥á  ú·¥á Ä·¥á.</blockquote></i>"
)

@Bot.on_message(filters.command("start"))
async def start(client, message):
    if Vars.IS_PRIVATE:
        if message.chat.id not in Vars.ADMINS:
            return await message.reply("<code>You cannot use me baby </code>")

    # Send typing action and welcome message
    await client.send_chat_action(message.chat.id, ChatAction.TYPING)
    msg = await message.reply_text(welcome_text)
    await asyncio.sleep(0.1)

    # Show startup animation
    await msg.edit_text("<b><i><pre>S·¥õ·¥Ä Ä·¥õ…™…¥…¢...</pre></i></b>")
    await asyncio.sleep(0.1)
    await msg.delete()

    # Send sticker
    await client.send_chat_action(message.chat.id, ChatAction.CHOOSE_STICKER)
    await message.reply_sticker(random.choice(stickers))

    if len(message.command) > 1:
        if message.command[1] != "start":
            user_id = message.from_user.id
            token = message.command[1]
            if verify_token_memory(user_id, token):
                sts = await message.reply("Token verified! You can now use the bot.")
                save_token(user_id, token)
                global_tokens.pop(user_id, None)
                await asyncio.sleep(8)
                await sts.delete()
            else:
                sts = await message.reply("Invalid or expired token. Requesting a new one...")
                await get_token(message, user_id)
                await sts.delete()
            return

    # Static image URL (replace with your preferred one)
    photo = "https://i.ibb.co/PvpdSpV7/photo-2025-07-21-17-44-51-7529592614991953944.jpg"

    ping = time.strftime("%Hh%Mm%Ss", time.gmtime(time.time() - Vars.PING))
    await message.reply_photo(
        photo,
        caption=(
            "<pre>H·¥á è·¥è ·¥Ñ·¥ú·¥õ…™·¥á</pre>\n"
            "<b><blockquote>I'·¥ç  è·¥è·¥ú Ä ·¥ç·¥Ä…¥…¢·¥Ä ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä  ô·¥è·¥õ. J·¥ús·¥õ s·¥á…¥·¥Ö ·¥ç·¥á ·¥Ä ·¥õ…™·¥õ ü·¥á, ·¥Ä…¥·¥Ö …™‚Äô ü ü “ì…™…¥·¥Ö …™·¥õ “ì·¥è Ä  è·¥è·¥ú …™…¥ ·¥Ñ ü·¥á·¥Ä Ä,  ú…™…¢ ú-Q·¥ú·¥Ä ü…™·¥õ è “ì·¥è Ä·¥ç·¥Ä·¥õ.</b></blockquote>\n"
            f"<blockquote><b><a href='https://t.me/EmitingStars_Botz'>‚Ä£ M·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á·¥Ö  ô è : E·¥ç…™·¥õ…™…¥…¢ S·¥õ·¥Ä Äs</a></b></blockquote>"
        ),
        reply_markup=InlineKeyboardMarkup([
            [
                InlineKeyboardButton("M·¥Ä…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü", url="https://t.me/EmitingStars_Botz"),
                InlineKeyboardButton("S·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/+HZuPVe0l-F1mM2Jl")
            ],
            [
                InlineKeyboardButton("D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä", url="http://t.me/RexySama")
            ]
        ])
    )


@Bot.on_message(filters.private)
async def on_private_message(client, message):
  if client.SHORTENER:
    if not await premium_user(message.from_user.id):
      if not verify_token(message.from_user.id):
        if not message.from_user.id in client.ADMINS:
          return await get_token(message, message.from_user.id)
  
  channel = client.FORCE_SUB_CHANNEL
  if not channel:
    return message.continue_propagation()

  try:
    if await client.get_chat_member(channel, message.from_user.id):
      return message.continue_propagation()

  except pyrogram.errors.UsernameNotOccupied:
    await message.reply("Channel does not exist, therefore bot will continue to operate normally")
    return message.continue_propagation()

  except pyrogram.errors.ChatAdminRequired:
    await message.reply("Bot is not admin of the channel, therefore bot will continue to operate normally")
    return message.continue_propagation()

  except pyrogram.errors.UserNotParticipant:
    await message.reply("<b>In order to use the bot you must join it's channel.</b>",
            reply_markup=InlineKeyboardMarkup([
              [InlineKeyboardButton(' Join Channel ! ', url=f't.me/{channel}')]]))

  except pyrogram.ContinuePropagation:
    raise
  except pyrogram.StopPropagation:
    raise
  except BaseException as e:
    await message.reply(e)
    return message.continue_propagation()

@Bot.on_message(filters.command(["add", "add_premium"]) & filters.user(Bot.ADMINS))
async def add_handler(_, msg):
  sts = await msg.reply_text("<pre>P Ä·¥è·¥Ñ·¥áss…™…¥…¢...</pre>")
  try:
    user_id = int(msg.text.split(" ")[1])
    time_limit_days = int(msg.text.split(" ")[2])
    await add_premium(user_id, time_limit_days)
    await retry_on_flood(sts.edit)("<pre>Us·¥á Ä ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è</pre>")
  except Exception as err:
    await retry_on_flood(sts.edit)(err)

@Bot.on_message(filters.command(["del", "del_premium"]) & filters.user(Bot.ADMINS))
async def del_handler(_, msg):
  sts = await msg.reply_text("<pre>P Ä·¥è·¥Ñ·¥áss…™…¥…¢...</pre>")
  try:
    user_id = int(msg.text.split(" ")[1])
    await remove_premium(user_id)
    await retry_on_flood(sts.edit)("<pre>Us·¥á Ä  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è.</pre>")
  except Exception as err:
    await retry_on_flood(sts.edit)(err)

@Bot.on_message(filters.command(["del_expired", "del_expired_premium"]) & filters.user(Bot.ADMINS))
async def del_expired_handler(_, msg):
  sts = await msg.reply_text("<pre>P Ä·¥è·¥Ñ·¥áss…™…¥…¢...</pre>")
  try:
    await remove_expired_users()
    await retry_on_flood(sts.edit)("<pre>Ex·¥ò…™ Ä·¥á·¥Ö ·¥ús·¥á Äs  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è.</pre>")
  except Exception as err:
    await retry_on_flood(sts.edit)(err)

@Bot.on_message(filters.command(["premium", "premium_users"]) & filters.user(Bot.ADMINS))
async def premium_handler(_, msg):
  sts = await msg.reply_text("<pre>P Ä·¥è·¥Ñ·¥áss…™…¥…¢...</pre>")
  try:
    premium_users = acollection.find()
    txt = "<b>Premium Users:-</b>\n"
    for user in premium_users:
      user_ids = user["user_id"]
      user_info = await _.get_users(user_ids)
      username = user_info.username
      first_name = user_info.first_name
      expiration_timestamp = user["expiration_timestamp"]
      xt = (expiration_timestamp-(time.time()))
      x = round(xt/(24*60*60))
      txt += f"User id: <code>{user_ids}</code>\nUsername: @{username}\nName: <code>{first_name}</code>\nExpiration Timestamp: {x} days\n"

    await retry_on_flood(sts.edit)(txt[:1024])
  except Exception as err:
    await retry_on_flood(sts.edit)(err)
  
@Bot.on_message(filters.command(["broadcast", "b"]) & filters.user(Bot.ADMINS))
async def b_handler(_, msg):
  return await borad_cast_(_, msg)

@Bot.on_message(filters.command(["pbroadcast", "pb"]) & filters.user(Bot.ADMINS))
async def pb_handler(_, msg):
  return await borad_cast_(_, msg, True)

async def borad_cast_(_, message, pin=None):
  def del_users(user_id):
    try:
      user_id = str(user_id)
      del uts[user_id]
      sync(_.DB_NAME, 'uts')
    except:
      pass
    
  sts = await message.reply_text("<pre>P Ä·¥è·¥Ñ·¥áss…™…¥…¢...</pre>")
  if message.reply_to_message:
    user_ids = get_users()
    msg = message.reply_to_message
    total = 0
    successful = 0
    blocked = 0
    deleted = 0
    unsuccessful = 0
    await retry_on_flood(sts.edit)("<pre>B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢...</pre>")
    for user_id in user_ids:
      try:
        docs = await msg.copy(int(user_id))
        if pin:
          await docs.pin(both_sides=True)
        
        successful += 1
      except FloodWait as e:
        await asyncio.sleep(e.value)
        
        docs = await msg.copy(int(user_id))
        if pin:
          await docs.pin(both_sides=True)
        
        successful += 1
      except pyrogram.errors.UserIsBlocked:
        del_users(user_id)
        blocked += 1
      except pyrogram.errors.PeerIdInvalid:
        del_users(user_id)
        unsuccessful += 1
      except pyrogram.errors.InputUserDeactivated:
        del_users(user_id)
        deleted += 1
      except pyrogram.errors.UserNotParticipant:
        del_users(user_id)
        blocked += 1
      except:
        unsuccessful += 1
    
    status = f"""<b><u>Broadcast Completed</u>

    Total Users: <code>{total}</code>
    Successful: <code>{successful}</code>
    Blocked Users: <code>{blocked}</code>
    Deleted Accounts: <code>{deleted}</code>
    Unsuccessful: <code>{unsuccessful}</code></b>"""
    
    await retry_on_flood(sts.edit)(status)
  else:
    await retry_on_flood(sts.edit)("<blockquote>R·¥á·¥ò ü è ·¥õ·¥è ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ …™·¥õ.</blockquote>")
          

    
@Bot.on_message(filters.command("restart") & filters.user(Bot.ADMINS))
async def restart_(client, message):
  msg = await message.reply_text("<pre>R·¥ás·¥õ·¥Ä Ä·¥õ…™…¥…¢.....</pre>", quote=True)
  with open("restart_msg.txt", "w") as file:
    file.write(str(msg.chat.id) + ":" + str(msg.id))
    file.close()
  
  await (await create_subprocess_exec("python3", "update.py")).wait()
  execl(executable, executable, "-B", "main.py")

def humanbytes(size):    
  if not size:
      return ""
  units = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB"]
  size = float(size)
  i = 0
  while size >= 1024.0 and i < len(units):
      i += 1
      size /= 1024.0
  return "%.2f %s" % (size, units[i])

def GET_PROVIDER():
  provider = "Unknown"
  try:
      if os.path.exists('/sys/hypervisor/uuid'):
          with open('/sys/hypervisor/uuid', 'r') as f:
              uuid = f.read().lower()
              if uuid.startswith('ec2'): provider = "AWS EC2"
              elif 'azure' in uuid: provider = "Microsoft Azure"

      elif os.path.exists('/etc/google-cloud-environment'):
          provider = "Google Cloud"

      elif os.path.exists('/etc/digitalocean'):
          provider = "DigitalOcean"

      elif os.path.exists('/dev/disk/by-id/scsi-0Linode'):
          provider = "Linode"

      elif os.path.exists('/etc/vultr'):
          provider = "Vultr"

  except Exception:
      pass
  
  return provider
  
@Bot.on_message(filters.command('stats'))
async def show_ping(_, message):
  total, used, free = shutil.disk_usage(".")
  total = humanbytes(total)
  used = humanbytes(used)
  free = humanbytes(free)
  net_start = psutil.net_io_counters()

  time.sleep(2)
  net_end = psutil.net_io_counters()

  bytes_sent = net_end.bytes_sent - net_start.bytes_sent
  bytes_recv = net_end.bytes_recv - net_start.bytes_recv
  #pkts_sent = net_end.packets_sent - net_start.packets_sent
  #pkts_recv = net_end.packets_recv - net_start.packets_recv
  
  cpu_cores = os.cpu_count()
  cpu_usage = psutil.cpu_percent()
  ram_usage = psutil.virtual_memory().percent
  disk_usage = psutil.disk_usage('/').percent
  try: uptime = time.strftime("%Hh%Mm%Ss", time.gmtime(time.time() - _.PING))
  except: uptime = None

  start_t = time.time()
  st = await message.reply('**A·¥Ñ·¥Ñ·¥áÍú±Íú±…™…¥…¢ T ú·¥á D·¥á·¥õ·¥Ä…™ üÍú±.....**')    
  end_t = time.time()
  time_taken_s = (end_t - start_t) * 1000 
  
  await message.reply_text(
    text=(f"<b><i>Total Disk Space: {total} \n"
          f"Used Space: {used}({disk_usage}%) \n"
          f"Free Space: {free} \n"
          f"CPU Cores: {cpu_cores} \n"
          f"CPU Usage: {cpu_usage}% \n"
          f"RAM Usage: {ram_usage}%\n"
          f"Uptime {uptime}\n"
          f"Cloud Provider: {GET_PROVIDER()}\n"
          f"OS: {platform.system()} \n"
          f"OS Version: {platform.release()} \n"
          f"Python Version: {platform.python_version()} \n"
          f"Pyrogram Version: {_.__version__} \n"
          f"Total I/O Data: {humanbytes(net_end.bytes_sent + net_end.bytes_recv)} \n"
          f"Upload Rate: {humanbytes(bytes_sent/2)}/s \n"
          f"Download Rate: {humanbytes(bytes_recv/2)}/s \n"
          f"Current Ping: {time_taken_s:.3f} ·¥çÍú±\n"
          f"Queue: {queue.qsize()}</i></b>\n"),
    quote=True
    )
  await st.delete()


@Bot.on_message(filters.command("shell") & filters.user(Bot.ADMINS))
async def shell(_, message):
  cmd = message.text.split(maxsplit=1)
  if len(cmd) == 1:
    return await message.reply("<code>No command to execute was given.</code>")

  cmd = cmd[1]
  proc = await asyncio.create_subprocess_shell(cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
  stdout, stderr = await proc.communicate()
  stdout = stdout.decode().strip()
  stderr = stderr.decode().strip()
  reply = ""
  if len(stdout) != 0:
    reply += f"<b>Stdout</b>\n<blockquote>{stdout}</blockquote>\n"
  if len(stderr) != 0:
    reply += f"<b>Stderr</b>\n<blockquote>{stderr}</blockquote>"

  if len(reply) > 3000:
    file_name = "shell_output.txt"
    with open(file_name) as out_file:
      await message.reply_document(out_file)
      out_file.close()
    os.remove(file_name)
  elif len(reply) != 0:
    await message.reply(reply)
  else:
    await message.reply("No Reply")
  
@Bot.on_message(filters.command("export") & filters.user(Bot.ADMINS))
async def export_(_, message):
  cmd = message.text.split(maxsplit=1)
  if len(cmd) == 1:
    return await message.reply("<pre>F…™ ü·¥á …¥·¥Ä·¥ç·¥á …¥·¥è·¥õ …¢…™·¥†·¥á…¥.</pre>")
  
  sts = await message.reply("<pre>F…™ ü·¥á …¥·¥Ä·¥ç·¥á …¥·¥è·¥õ …¢…™·¥†·¥á…¥.</pre>")
  try:
    file_name = cmd[1]
    if "*2" in file_name:
      file_name = file_name.replace("*2", "")
      file_name = f"__{file_name}__"
    
    if os.path.exists(file_name):
      await message.reply_document(file_name)
    else:
      await sts.edit("<pre>F…™ ü·¥á …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö</pre>")
  except Exception as err:
    await sts.edit(err)
  

@Bot.on_message(filters.command("import") & filters.user(Bot.ADMINS))
async def import_(_, message):
  cmd = message.text.split(maxsplit=1)
  if len(cmd) == 1:
    return await message.reply("<pre>F…™ ü·¥á …¥·¥Ä·¥ç·¥á …¥·¥è·¥õ …¢…™·¥†·¥á…¥.</pre>")

  sts = await message.reply("<pre>P Ä·¥è·¥Ñ·¥áss…™…¥…¢...</pre>")
  try:
    file_name = cmd[1]
    if "*2" in file_name:
      file_name = file_name.replace("*2", "")
      file_name = f"__{file_name}__"

    if not os.path.exists(file_name):
      await message.download(file_name, file_name=file_name)
    else:
      await sts.edit("<pre>F…™ ü·¥á ·¥ò·¥Ä·¥õ ú “ì·¥è·¥ú…¥·¥Ö</pre>")
  except Exception as err:
    await sts.edit(err)

@Bot.on_message(filters.command(["clean", "c"]) & filters.user(Bot.ADMINS))
async def clean(_, message):
  directory = '/app'
  ex = (".mkv", ".mp4", ".zip", ".pdf", ".png", ".epub", ".temp")
  protected_dirs = (".git", "venv", "env", "__pycache__")  # Directories to SKIP
  sts = await message.reply_text("<pre>C ü·¥á·¥Ä…¥…™…¥…¢ “ì…™ ü·¥ás...</pre>")
  deleted_files = []
  removed_dirs = []
  
  if os.path.exists("Process"):
    shutil.rmtree("Process")
  elif os.path.exists("./Process"):
    shutil.rmtree("./Process")
    
  try:
    for root, dirs, files in os.walk(directory, topdown=False):
      # Skip protected directories (e.g., .git)
      dirs[:] = [d for d in dirs if d not in protected_dirs]
      for file in files:
        if file.lower().endswith(ex):
          file_path = os.path.join(root, file)
          try:
            os.remove(file_path)
            deleted_files.append(file_path)
          except Exception as e:
            pass

        elif file.lower().startswith("vol"):
          file_path = os.path.join(root, file)
          try:
            os.remove(file_path)
            deleted_files.append(file_path)
          except Exception as e:
            pass

      for dir_name in dirs:
        dir_path = os.path.join(root, dir_name)
        try:
          if not os.listdir(dir_path):  # Check if empty
            os.rmdir(dir_path)
            removed_dirs.append(dir_path)

          elif dir_path == "/app/Downloads":
            os.rmdir("/app/Downloads")
            removed_dirs.append("/app/Downloads")

          elif dir_path == "/app/downloads":
            os.rmdir("/app/downloads")
            removed_dirs.append("/app/downloads")

          try:
            dir_path = int(dir_path)
            os.rmdir(dir_path)
            removed_dirs.append(dir_path)
          except:
            pass
        except Exception as e:
          pass

    msg = "<pre>C ü·¥á·¥Ä…¥…™…¥…¢  ü·¥è…¢s :</pre>\n"
    if deleted_files:
      msg += f"D·¥á ü·¥á·¥õ·¥á·¥Ö {len(deleted_files)} F…™ ü·¥ás :\n" + "\n".join(deleted_files[:10])  # Show first 10
      if len(deleted_files) > 10:
        msg += f"\n... ·¥Ä…¥·¥Ö {len(deleted_files) - 10} ·¥ç·¥è Ä·¥á."
      else:
        msg += "<b><blockquote>‚úî N·¥è “ì…™ ü·¥ás ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö.</b></blockquote>"

    if removed_dirs:
      msg += f"\n\nR·¥á·¥ç·¥è·¥†·¥á·¥Ö {len(removed_dirs)} ·¥á·¥ç·¥ò·¥õ è ·¥Ö…™ Ä·¥á·¥Ñ·¥õ·¥è Ä…™·¥ás :\n" + "\n".join(removed_dirs[:5])
      if len(removed_dirs) > 5:
        msg += f"\n... ·¥Ä…¥·¥Ö {len(removed_dirs) - 5} ·¥ç·¥è Ä·¥á."

    await sts.edit(msg[:4096])  # Telegram's max message length
  except Exception as err:
    await sts.edit(f"‚ùå Error: {str(err)}")

def remove_dir(path):
    try:
        if os.path.exists(path):
            for root, dirs, files in os.walk(path, topdown=False):
                for file in files:
                    os.remove(os.path.join(root, file))
                    for dir in dirs:
                        os.rmdir(os.path.join(root, dir))
            os.rmdir(path)
    except Exception as err:
        return err


@Bot.on_message(filters.command("updates"))
async def updates_(_, message):
  if Vars.IS_PRIVATE:
    if message.chat.id not in Vars.ADMINS:
      return await message.reply("<pre>Y·¥è·¥ú ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ús·¥á ·¥ç·¥á  ô·¥Ä ô è</pre>")
  try:
    await message.reply_photo(
      photo=random.choice(Vars.PICS),
      caption="<pre>C ú·¥è·¥ès·¥á s…™·¥õ·¥ás</pre>",
      reply_markup=plugins_list("updates"),
      quote=True,
    )
  except FloodWait as err:
    await asyncio.sleep(err.value)
    await message.reply_photo(
      photo=random.choice(Vars.PICS),
      caption="<pre>C ú·¥è·¥ès·¥á s…™·¥õ·¥ás</pre>",
      reply_markup=plugins_list("updates"),
      quote=True,
    )
  except:
    await message.reply_photo(
      photo=random.choice(Vars.PICS),
      caption="<pre>C ú·¥è·¥ès·¥á s…™·¥õ·¥ás</pre>",
      reply_markup=plugins_list("updates"),
      quote=True,
    )
  
@Bot.on_message(filters.command("queue"))
async def queue_msg_handler(client, message):
  if Vars.IS_PRIVATE:
    if message.chat.id not in Vars.ADMINS:
      return await message.reply("<pre> è·¥è·¥ú ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ús·¥á ·¥ç·¥á  ô·¥Ä ô è</pre>")

  await message.reply(f"<blockquote><b>‚Ä∫‚Ä∫ Y·¥è·¥ú Ä «´·¥ú·¥á·¥ú·¥á : {queue.get_count_(message.from_user.id)}\n\n‚Ä∫‚Ä∫ T·¥è·¥õ·¥Ä ü «´·¥ú·¥á·¥ú·¥á s…™·¥¢·¥á : {int(queue.qsize())+1}</b></blockquote>")

@Bot.on_message(filters.command(["us", "user_setting", "user_panel"]))
async def userxsettings(client, message):
  if Vars.IS_PRIVATE:
    if message.chat.id not in Vars.ADMINS:
      return await message.reply("<pre>Y·¥è·¥ú ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ús·¥á ·¥ç·¥á  ô·¥Ä ô è</pre>")
  
  sts = await message.reply("<pre>P Ä·¥è·¥Ñ·¥áss…™…¥…¢...</pre>")
  try:
    db_type = "uts"
    name = Vars.DB_NAME
    user_id = str(message.from_user.id)
    if not user_id in uts:
      uts[user_id] = {}
      sync(name, db_type)

    if not "setting" in uts[user_id]:
      uts[user_id]['setting'] = {}
      sync(name, db_type)

    thumbnali = uts[user_id]['setting'].get("thumb", None)
    if thumbnali:
      thumb = "True" if not thumbnali.startswith("http") else thumbnali
    else:
      thumb = thumbnali

    banner1 = uts[user_id]['setting'].get("banner1", None)
    banner2 = uts[user_id]['setting'].get("banner2", None)
    if banner1:
      banner1 = "True" if not banner1.startswith("http") else banner1

    if banner2:
      banner2 = "True" if not banner2.startswith("http") else banner2

    txt = users_txt.format(
      id=user_id,
      file_name=uts[user_id]['setting'].get("file_name", "None"),
      caption=uts[user_id]['setting'].get("caption", "None"),
      thumb=thumb,
      banner1=banner1,
      banner2=banner2,
      dump=uts[user_id]['setting'].get("dump", "None"),
      type=uts[user_id]['setting'].get("type", "None"),
      megre=uts[user_id]['setting'].get("megre", "None"),
      regex=uts[user_id]['setting'].get("regex", "None"),
      len=uts[user_id]['setting'].get("file_name_len", "None"),
      password=uts[user_id]['setting'].get("password", "None"),
    )

    button = [
      [
        InlineKeyboardButton("F…™ ü·¥á …¥·¥Ä·¥ç·¥á", callback_data="ufn"),
        InlineKeyboardButton("C·¥Ä·¥ò·¥õ…™·¥è…¥‚Äå", callback_data="ucp")
      ],
      [
        InlineKeyboardButton("T ú·¥ú·¥ç ô…¥·¥Ä ü…™", callback_data="uth"),
        InlineKeyboardButton("R·¥á…¢·¥áx", callback_data="uregex")
      ],
      [
        InlineKeyboardButton("B·¥Ä…¥…¥·¥á Ä", callback_data="ubn"),
      ],
      [
        InlineKeyboardButton("P·¥Äss·¥°·¥è Ä·¥Ö", callback_data="upass"),
        InlineKeyboardButton("M·¥á…¢ Ä·¥á s…™·¥¢·¥á", callback_data="umegre")
      ],
      [
        InlineKeyboardButton("F…™ ü·¥á ·¥õ è·¥ò·¥á", callback_data="u_file_type"),
      ],
    ]
    if not Vars.CONSTANT_DUMP_CHANNEL:
      button[-1].append(InlineKeyboardButton("D·¥ú·¥ç·¥ò ·¥Ñ ú·¥Ä…¥…¥·¥á ü", callback_data="udc"))
    
    button.append([InlineKeyboardButton("C ü·¥ès·¥á", callback_data="close")])
    if not thumbnali:
      thumbnali = random.choice(Vars.PICS)
    try:
      await message.reply_photo(thumbnali, caption=txt, reply_markup=InlineKeyboardMarkup(button))
    except FloodWait as err:
      await asyncio.sleep(err.value)
      await message.reply_photo(thumbnali, caption=txt, reply_markup=InlineKeyboardMarkup(button))
    except:
      await message.reply_photo(photo=random.choice(Vars.PICS), caption=txt, reply_markup=InlineKeyboardMarkup(button))

    await sts.delete()
  except Exception as err:
    logger.exception(err)
    await sts.edit(err)

@Bot.on_message(filters.command("help"))
async def help(client, message):
    if Vars.IS_PRIVATE and message.chat.id not in Vars.ADMINS:
        return await message.reply("<code>You cannot use me baby </code>")

    buttons = InlineKeyboardMarkup(
        [[
            InlineKeyboardButton("D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä", url="https://t.me/RexySama"),
            InlineKeyboardButton("C ü·¥ès·¥á", callback_data="close")
        ]]
    )

    await message.reply_photo(
        photo="https://telegra.ph/HgBotz-08-01-5",  # Replace with your actual image URL or local path
        caption=HELP_MSG,
        message_effect_id=5104841245755180586, 
        reply_markup=buttons
    )

# Add a callback handler for the "Close" button
@Bot.on_callback_query(filters.regex("close"))
async def close_button(client, callback_query):
    try:
        await callback_query.message.delete()
    except:
        await callback_query.answer("Can't delete the message", show_alert=True)



@Bot.on_message(filters.command(["deltask", "cleantasks", "del_tasks", "clean_tasks"]))
async def deltask(client, message):
  if Vars.IS_PRIVATE:
    if message.chat.id not in Vars.ADMINS:
      return await message.reply("<pre>Y·¥è·¥ú ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ús·¥á ·¥ç·¥á  ô·¥Ä ô è</pre>")

  user_id = message.from_user.id
  numb = 0
  if user_id in queue._user_data:
    for task_id in queue._user_data[user_id]:
      await queue.delete_task(task_id)
      numb += 1
    await message.reply(f"<pre>A ü ü ·¥õ·¥Äs·¥ãs ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö :- {numb}</pre>")
  else:
    await message.reply("<pre>N·¥è ·¥õ·¥Äs·¥ãs “ì·¥è·¥ú…¥·¥Ö</pre>")


@Bot.on_message(filters.command("subscribe"))
async def subs(_, message):
  if _.IS_PRIVATE:
    if message.chat.id not in _.ADMINS:
      return await message.reply("<pre>Y·¥è·¥ú ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ús·¥á ·¥ç·¥á  ô·¥Ä ô è</pre>")
  
  sts = await message.reply_text("<pre>G·¥á·¥õ·¥õ…™…¥…¢  è·¥è·¥ú Ä s·¥ú ôs·¥Ñ Ä…™ ô·¥á  ü…™s·¥õ...</pre>")
  txt = "<b>‚óà S·¥ú ôs·¥Ñ Ä…™ ô…™…¥…¢  ü…™s·¥õ :-</b>\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
  try:
    subs_list = get_subs(message.from_user.id)
    for sub in subs_list:
      txt += f"<blockquote>‚Ä∫‚Ä∫ <code>{sub}</code></blockquote>\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    txt += f"<blockquote>=> <code>T·¥è·¥õ·¥Ä ü s·¥ú ôs·¥Ñ Ä…™ ô·¥á :- {len(subs_list)}</code></blockquote>\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    txt += f"\n<b>T·¥è ·¥ú…¥s·¥ú ôs·¥Ñ Ä…™ ô·¥á :-</b>\n<blockquote><code>/unsubscribe</code> ·¥ú Ä ü</blockquote>\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    await retry_on_flood(sts.edit)(txt[:1024])
  except Exception as err:
    await retry_on_flood(sts.edit)(err)

@Bot.on_message(filters.command("unsubscribe"))
async def unsubs(_, message):
  if _.IS_PRIVATE:
    if message.chat.id not in _.ADMINS:
      return await message.reply("<pre>Y·¥è·¥ú ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ús·¥á ·¥ç·¥á  ô·¥Ä ô è</pre>")
  
  sts = await message.reply_text("<pre>P Ä·¥è·¥Ñ·¥áss…™…¥…¢ ·¥õ·¥è ·¥ú…¥s·¥ú ôs·¥Ñ Ä…™ ô·¥á...</pre>")
  try:
    txt = message.text.split(" ")[1]
    if txt in dts:
      if message.from_user.id in dts[txt]['users']:
        dts[txt]['users'].remove(message.from_user.id)
        sync(_.DB_NAME, 'dts')
        await retry_on_flood(sts.edit)("<pre>S·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è ·¥ú…¥s·¥ú ôs·¥Ñ Ä…™ ô·¥á</pre>")
      else:
        await retry_on_flood(sts.edit)("<b><blockquote>Y·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ s·¥ú ôs·¥Ñ Ä…™ ô·¥á·¥Ö ·¥õ·¥è ·¥õ ú…™s ·¥ç·¥Ä…¥…¢·¥Ä | ·¥ç·¥Ä…¥ ú·¥°·¥Ä</b></blockquote></code>")
    else:
      await retry_on_flood(sts.edit)("<pre>M·¥Ä…¥…¢·¥Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö</pre>")
  except Exception as err:
    await retry_on_flood(sts.edit)(err)


@Bot.on_message(filters.command("search"))
async def search_group(client, message):
  if Vars.IS_PRIVATE:
    if message.chat.id not in Vars.ADMINS:
      return await message.reply("<pre>Y·¥è·¥ú ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ús·¥á ·¥ç·¥á  ô·¥Ä ô è</pre>")
  
  if client.SHORTENER:
    if not await premium_user(message.from_user.id):
      if not verify_token(message.from_user.id):
        if not message.from_user.id in client.ADMINS:
          return await get_token(message, message.from_user.id)
    
  try: txt = message.text.split(" ")[1]
  except: return await message.reply("<b><blockquote>F·¥è Ä·¥ç·¥Ä·¥õ :-<code>/search Bleach</code></b></blockquote>")
  photo = random.choice(Vars.PICS)

  try: 
    await message.reply_photo(photo, caption="<pre>S·¥á ü·¥á·¥Ñ·¥õ s·¥á·¥Ä Ä·¥Ñ ú ·¥°·¥á ôs…™·¥õ·¥á</pre>", reply_markup=plugins_list(), quote=True)
  except ValueError: 
    await message.reply_photo(photo, caption="<pre>S·¥á ü·¥á·¥Ñ·¥õ s·¥á·¥Ä Ä·¥Ñ ú ·¥°·¥á ôs…™·¥õ·¥á</pre>", reply_markup=plugins_list(), quote=True)


@Bot.on_message(filters.text & filters.private)
async def search(client, message):
  if Vars.IS_PRIVATE:
    if message.chat.id not in Vars.ADMINS:
      return await message.reply("<pre>Y·¥è·¥ú ·¥Ñ·¥Ä…¥…¥·¥è·¥õ ·¥ús·¥á ·¥ç·¥á  ô·¥Ä ô è</pre>")

  txt = message.text
  photo = random.choice(Vars.PICS)
  button = []
  if not txt.startswith("/"):
    try: await message.reply_photo(photo, caption="<pre>S·¥á ü·¥á·¥Ñ·¥õ s·¥á·¥Ä Ä·¥Ñ ú ·¥°·¥á ôs…™·¥õ·¥á</pre>", reply_markup=plugins_list(), quote=True)
    except ValueError: await message.reply_photo(photo, caption="<pre>S·¥á ü·¥á·¥Ñ·¥õ s·¥á·¥Ä Ä·¥Ñ ú ·¥°·¥á ôs…™·¥õ·¥á</pre>", reply_markup=plugins_list(), quote=True)
